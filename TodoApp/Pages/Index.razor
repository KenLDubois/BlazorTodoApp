@using TodoApp.Models;
@page "/"

    <div class="jumbotron bg-primary mt-4 text-white pt-4 pb-2">
        <h1 class="display-4 ">Your Todo App</h1>
        <form class="row">
            <div class="col-7">
                <input type="text" name="todoText" @bind:event="oninput" @bind="todoText" class="form-control" placeholder="New To Do" />
            </div>
            <div class="col-3">
                <select @bind="priority" class="form-control">
                    @foreach (var p in Enum.GetValues(typeof(Priority)))
                    {
                        <option class="text-@(priorityClass(p.ToString()))">@p.ToString()</option>
                    }
                </select>
            </div>
            <div class="col-2">
                <button type="submit" class="btn btn-block btn-outline-light" @onclick="addTodo" disabled="@(string.IsNullOrEmpty(todoText))">Add Todo</button>
            </div>
        </form>
        <p class="mt-3">
            You have @pq.Count things to do.
            <button class="btn" @onclick="pq.Clear">Clear All Todos</button>
        </p>
    </div>

    <div class="row">
        <div class="col col-12">
            
            @if (pq.Count == 0)
            {
                <div class="alert alert-success font-weight-bold py-4">
                    You have nothing to do. Great job!
                </div>
            }
            
            @for (int i = 0; i < pq.Count; i++)
            {
                if (i == 0)
                {
                    <div class="container-fluid alert py-4 alert-@(priorityClass(pq[i].Priority))">
                        <div class="row">
                            <div class="col-10">
                                <span class="badge badge-pill mr-4 badge-@(priorityClass(pq[i].Priority))">
                                    @pq[i].Priority
                                </span>
                                @pq[i].Text
                            </div>
                            <div class="col-2">
                                <button class="btn btn-success btn-block btn-sm" @onclick="completed">
                                    Done
                                </button>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="container-fluid alert alert-@(priorityClass(pq[i].Priority))">
                        <span class="badge badge-pill mr-4 badge-@(priorityClass(pq[i].Priority))">
                            @pq[i].Priority
                        </span>
                        @pq[i].Text
                    </div>
                }

            }

        </div>
    </div>

@code {

    private static PriorityQueue pq = new PriorityQueue();

    private static string todoText;
    private Priority priority = Priority.Normal;

    private void addTodo()
    {
        pq.Enqueue(new Todo(todoText, priority));
        priority = Priority.Normal;
        todoText = "";
    }

    private string priorityClass(string p)
    {
        Priority _p;
        Enum.TryParse(p, out _p);

        return priorityClass(_p);
    }

    private string priorityClass(Priority p)
    {
        if (p == Priority.Urgent)
            return "danger";

        if (p == Priority.High)
            return "warning";

        if (p == Priority.Low)
            return "info";

        return "secondary";
    }

    private void completed()
    {
        pq.Dequeue();
    }
}